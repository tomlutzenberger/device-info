/*!
 * DeviceInfo v0.1
 * Dynamic Bookmarklet to quickly access the backend of your tool
 *
 * Copyright (c) 2017 - Tom Lutzenberger (lutzenbergerthomas at gmail dot com)
 * https://github.com/tomlutzenberger/device-info
 *
 * @license: Licensed under the MIT license
 * https://github.com/tomlutzenberger/device-info/blob/master/LICENSE
 * https://tomlutzenberger.github.io/device-info/
 */
const DeviceInfo=()=>{const n={getWindowInnerWidth:()=>window.innerWidth||"undefined",getWindowInnerHeight:()=>window.innerHeight||"undefined",setWindowInnerDimension:()=>{const e=`${n.getWindowInnerWidth()}x${n.getWindowInnerHeight()}`;return o("window-inner-dimension",e)},getWindowOuterWidth:()=>window.outerWidth||"undefined",getWindowOuterHeight:()=>window.outerHeight||"undefined",setWindowOuterDimension:()=>{const e=`${n.getWindowOuterWidth()}x${n.getWindowOuterHeight()}`;return o("window-outer-dimension",e)},getWindowMaxWidth:()=>window.screen.availWidth||"undefined",getWindowMaxHeight:()=>window.screen.availHeight||"undefined",setWindowMaxDimension:()=>{const e=`${n.getWindowMaxWidth()}x${n.getWindowMaxHeight()}`;return o("window-max-dimension",e)},getWindowSize:()=>{let e="";e=window.fullScreen?"Fullscreen":n.getWindowOuterWidth()===window.screen.availWidth&&n.getWindowOuterHeight()===window.screen.availHeight?"Maximized":160===n.getWindowOuterWidth()&&28===n.getWindowOuterHeight()?"Minimized":"Restored";return e},setWindowSize:()=>{const e=`${n.getWindowSize()}`;return o("window-size",e)}};const e={getWidth:()=>t(window.screen.width,"window.screen.width"),getHeight:()=>t(window.screen.height,"window.screen.height"),setDimension:()=>{const n=`${e.getWidth()}x${e.getHeight()}`;return o("screen-dimension",n)},getPixelRatio:()=>t(window.devicePixelRatio,"window.devicePixelRatio"),setPixelRatio:()=>{const n=`${e.getPixelRatio()}x`;return o("screen-pixel-ratio",n)},getColorDepth:()=>t(window.screen.colorDepth,"window.screen.colorDepth"),setColorDepth:()=>{const n=`${e.getColorDepth()} Bit`;return o("screen-color-depth",n)},getScreenType:()=>{let e=!0;(window.screenX<0||window.screenY<0||window.screenX>n.getWindowMaxWidth()||window.screenY>n.getWindowMaxHeight())&&(e=!1);return e?"Primary":"Secondary"},setScreenType:()=>{const n=`${e.getScreenType()} Screen`;return o("screen-type",n)},getScreenPosition:()=>{let e="";let i="";e=window.screenX<0?"Left":window.screenX>n.getWindowMaxWidth()?"Right":"Center";i=window.screenY<0?"Top":window.screenY>n.getWindowMaxHeight()?"Bottom":"Center";return e===i?e:e+" "+i},setScreenPosition:()=>{const n=`${e.getScreenPosition()}`;return o("screen-position",n)}};const i=(n,...e)=>{const i=window.console;let t=Object.keys(e).map(n=>e[n]);t.unshift("[DeviceInfo]");if(t.length>=2)return"function"==typeof i[n]?(i[n].apply(console,t),!0):(i.error("console."+n+" is not a valid logging function."),i.debug.apply(console,t),!1);return!1};const t=(n,e)=>void 0===n||null===n?(i("warn",`${e} is undefined (=${n})`),"undefined"):n;const o=(n,e)=>{const t=document.getElementById(n);if(null!==t){const n="undefined"===e?"text-danger":"text-success";return t.lastElementChild.innerHTML=`<span class="${n}">${e}</span>`,!0}return i("error","#window-max-dimension is not a DOM element"),!1};const d=()=>{n.setWindowInnerDimension();n.setWindowOuterDimension();n.setWindowMaxDimension();n.setWindowSize();e.setDimension();e.setPixelRatio();e.setColorDepth();e.setScreenType();e.setScreenPosition()};return{execute:d,log:i,typeCheck:t,injectIntoDom:o,win:n,screen:e}},di=DeviceInfo();di.execute();